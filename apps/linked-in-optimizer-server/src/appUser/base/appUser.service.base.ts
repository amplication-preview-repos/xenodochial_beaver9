/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AppUser as PrismaAppUser,
  ProfileOptimization as PrismaProfileOptimization,
  Session as PrismaSession,
} from "@prisma/client";

import { AppUserCreateInput } from "./AppUserCreateInput";
import { AppUser } from "./AppUser";
import { AppUserWhereUniqueInput } from "./AppUserWhereUniqueInput";
import { AppUserUpdateInput } from "./AppUserUpdateInput";

export class AppUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AppUserCountArgs, "select">): Promise<number> {
    return this.prisma.appUser.count(args);
  }

  async appUsers(args: Prisma.AppUserFindManyArgs): Promise<PrismaAppUser[]> {
    return this.prisma.appUser.findMany(args);
  }
  async appUser(
    args: Prisma.AppUserFindUniqueArgs
  ): Promise<PrismaAppUser | null> {
    return this.prisma.appUser.findUnique(args);
  }
  async createAppUser(args: Prisma.AppUserCreateArgs): Promise<PrismaAppUser> {
    return this.prisma.appUser.create(args);
  }
  async updateAppUser(args: Prisma.AppUserUpdateArgs): Promise<PrismaAppUser> {
    return this.prisma.appUser.update(args);
  }
  async deleteAppUser(args: Prisma.AppUserDeleteArgs): Promise<PrismaAppUser> {
    return this.prisma.appUser.delete(args);
  }

  async findProfileOptimizations(
    parentId: string,
    args: Prisma.ProfileOptimizationFindManyArgs
  ): Promise<PrismaProfileOptimization[]> {
    return this.prisma.appUser
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .profileOptimizations(args);
  }

  async findSessions(
    parentId: string,
    args: Prisma.SessionFindManyArgs
  ): Promise<PrismaSession[]> {
    return this.prisma.appUser
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sessions(args);
  }
  async CreateAppUser(args: AppUserCreateInput): Promise<AppUser> {
    throw new Error("Not implemented");
  }
  async DeleteAppUser(args: string): Promise<boolean> {
    throw new Error("Not implemented");
  }
  async GetAppUser(args: AppUserWhereUniqueInput): Promise<AppUser> {
    throw new Error("Not implemented");
  }
  async UpdateAppUser(args: AppUserUpdateInput): Promise<AppUser> {
    throw new Error("Not implemented");
  }
}
