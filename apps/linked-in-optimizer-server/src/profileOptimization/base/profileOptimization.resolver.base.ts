/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProfileOptimization } from "./ProfileOptimization";
import { ProfileOptimizationCountArgs } from "./ProfileOptimizationCountArgs";
import { ProfileOptimizationFindManyArgs } from "./ProfileOptimizationFindManyArgs";
import { ProfileOptimizationFindUniqueArgs } from "./ProfileOptimizationFindUniqueArgs";
import { CreateProfileOptimizationArgs } from "./CreateProfileOptimizationArgs";
import { UpdateProfileOptimizationArgs } from "./UpdateProfileOptimizationArgs";
import { DeleteProfileOptimizationArgs } from "./DeleteProfileOptimizationArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { User } from "../../user/base/User";
import { ProfileOptimizationCreateInput } from "./ProfileOptimizationCreateInput";
import { ProfileOptimizationWhereUniqueInput } from "./ProfileOptimizationWhereUniqueInput";
import { ProfileOptimizationService } from "../profileOptimization.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProfileOptimization)
export class ProfileOptimizationResolverBase {
  constructor(
    protected readonly service: ProfileOptimizationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProfileOptimization",
    action: "read",
    possession: "any",
  })
  async _profileOptimizationsMeta(
    @graphql.Args() args: ProfileOptimizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProfileOptimization])
  @nestAccessControl.UseRoles({
    resource: "ProfileOptimization",
    action: "read",
    possession: "any",
  })
  async profileOptimizations(
    @graphql.Args() args: ProfileOptimizationFindManyArgs
  ): Promise<ProfileOptimization[]> {
    return this.service.profileOptimizations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProfileOptimization, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProfileOptimization",
    action: "read",
    possession: "own",
  })
  async profileOptimization(
    @graphql.Args() args: ProfileOptimizationFindUniqueArgs
  ): Promise<ProfileOptimization | null> {
    const result = await this.service.profileOptimization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProfileOptimization)
  @nestAccessControl.UseRoles({
    resource: "ProfileOptimization",
    action: "create",
    possession: "any",
  })
  async createProfileOptimization(
    @graphql.Args() args: CreateProfileOptimizationArgs
  ): Promise<ProfileOptimization> {
    return await this.service.createProfileOptimization({
      ...args,
      data: {
        ...args.data,

        appUser: args.data.appUser
          ? {
              connect: args.data.appUser,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProfileOptimization)
  @nestAccessControl.UseRoles({
    resource: "ProfileOptimization",
    action: "update",
    possession: "any",
  })
  async updateProfileOptimization(
    @graphql.Args() args: UpdateProfileOptimizationArgs
  ): Promise<ProfileOptimization | null> {
    try {
      return await this.service.updateProfileOptimization({
        ...args,
        data: {
          ...args.data,

          appUser: args.data.appUser
            ? {
                connect: args.data.appUser,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProfileOptimization)
  @nestAccessControl.UseRoles({
    resource: "ProfileOptimization",
    action: "delete",
    possession: "any",
  })
  async deleteProfileOptimization(
    @graphql.Args() args: DeleteProfileOptimizationArgs
  ): Promise<ProfileOptimization | null> {
    try {
      return await this.service.deleteProfileOptimization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUser",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUser(
    @graphql.Parent() parent: ProfileOptimization
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: ProfileOptimization
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProfileOptimization)
  async CreateProfileOptimization(
    @graphql.Args()
    args: ProfileOptimizationCreateInput
  ): Promise<ProfileOptimization> {
    return this.service.CreateProfileOptimization(args);
  }

  @graphql.Mutation(() => Boolean)
  async DeleteProfileOptimization(
    @graphql.Args()
    args: ProfileOptimizationWhereUniqueInput
  ): Promise<boolean> {
    return this.service.DeleteProfileOptimization(args);
  }

  @graphql.Query(() => ProfileOptimization)
  async GetProfileOptimization(
    @graphql.Args()
    args: ProfileOptimizationWhereUniqueInput
  ): Promise<ProfileOptimization> {
    return this.service.GetProfileOptimization(args);
  }

  @graphql.Mutation(() => ProfileOptimization)
  async UpdateProfileOptimization(
    @graphql.Args()
    args: UpdateProfileOptimizationArgs
  ): Promise<ProfileOptimization> {
    return this.service.UpdateProfileOptimization(args);
  }
}
