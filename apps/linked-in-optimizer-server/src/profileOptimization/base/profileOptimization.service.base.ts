/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProfileOptimization as PrismaProfileOptimization,
  AppUser as PrismaAppUser,
  User as PrismaUser,
} from "@prisma/client";

import { ProfileOptimizationCreateInput } from "./ProfileOptimizationCreateInput";
import { ProfileOptimization } from "./ProfileOptimization";
import { ProfileOptimizationWhereUniqueInput } from "./ProfileOptimizationWhereUniqueInput";
import { UpdateProfileOptimizationArgs } from "./UpdateProfileOptimizationArgs";

export class ProfileOptimizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProfileOptimizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.profileOptimization.count(args);
  }

  async profileOptimizations(
    args: Prisma.ProfileOptimizationFindManyArgs
  ): Promise<PrismaProfileOptimization[]> {
    return this.prisma.profileOptimization.findMany(args);
  }
  async profileOptimization(
    args: Prisma.ProfileOptimizationFindUniqueArgs
  ): Promise<PrismaProfileOptimization | null> {
    return this.prisma.profileOptimization.findUnique(args);
  }
  async createProfileOptimization(
    args: Prisma.ProfileOptimizationCreateArgs
  ): Promise<PrismaProfileOptimization> {
    return this.prisma.profileOptimization.create(args);
  }
  async updateProfileOptimization(
    args: Prisma.ProfileOptimizationUpdateArgs
  ): Promise<PrismaProfileOptimization> {
    return this.prisma.profileOptimization.update(args);
  }
  async deleteProfileOptimization(
    args: Prisma.ProfileOptimizationDeleteArgs
  ): Promise<PrismaProfileOptimization> {
    return this.prisma.profileOptimization.delete(args);
  }

  async getAppUser(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.profileOptimization
      .findUnique({
        where: { id: parentId },
      })
      .appUser();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.profileOptimization
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async CreateProfileOptimization(
    args: ProfileOptimizationCreateInput
  ): Promise<ProfileOptimization> {
    throw new Error("Not implemented");
  }
  async DeleteProfileOptimization(
    args: ProfileOptimizationWhereUniqueInput
  ): Promise<boolean> {
    throw new Error("Not implemented");
  }
  async GetProfileOptimization(
    args: ProfileOptimizationWhereUniqueInput
  ): Promise<ProfileOptimization> {
    throw new Error("Not implemented");
  }
  async UpdateProfileOptimization(
    args: UpdateProfileOptimizationArgs
  ): Promise<ProfileOptimization> {
    throw new Error("Not implemented");
  }
}
